%cohort_analysis){
	source ~soft_bio_267/initializes/init_pets
	?
	coPatReporter.rb -i $disease_hpo_file -p HPOID -d DiseaseID -C 20 -m $similarity_measure -o disease_clusters

	if [ ! -s disease_clusters.html ]; then 
		>&2 echo "Cohort analysis has failed"
		exit 1
	fi
}

generate_clusters){
	resources: -t '7-00:00:00' -m '100gb' -c 20
	source ~soft_bio_267/initializes/init_netanalyzer
	source ~soft_bio_267/initializes/init_python
	export PATH=$scripts_path:$PATH	
	touch missing_genes.txt
	LAYERS='gene,[A-Za-z0-9]'
	awk '{ if ($3 >= $combined_score) print $1 "\t" $2 "\t" $3}' $string_network | tail -n +2 > string_sure_conn.txt
	netanalyzer.py -i string_sure_conn.txt -l $LAYERS -A 'get_degree,get_degreeZ' -o out
	awk '{ if ($3 >= $hub_zscore) print $1 }' node_attributes.txt > computed_hub_nodes
	intersect_columns.py -a computed_hub_nodes -b $white_list -k a > hub_nodes
	# Invert string value to calculate ASP (djkistra algorithm)
	grep -v -w -F -f hub_nodes string_sure_conn.txt | awk '{print $1 "\t" $2 "\t" 1000 - $3}' > filtered_string.txt
	?	
	clusterORPHA_to_clusterGEN.py -i cohort_analysis)/temp/"$similarity_measure"_clusters.txt -t $disease_gene_file -o raw_clustered_genes.txt -m $min_group -F $gene_filter # to get genes for each disease cluster
	## /mnt/home/users/bio_267_uma/federogc/projects/sylentis_target_prediction/workflow_results/netanalyzer.py_0000	
	## Expand clusters by genes and calculate ASP:

	netanalyzer.py -i filtered_string.txt -G raw_clustered_genes.txt -l $LAYERS -x 'sht_path' --one_sht_pairs &> all_missing_genes.txt
	cut -d ' ' -f 2,3,9 all_missing_genes.txt | grep 'id:' | cut -d ' ' -f 2,3 | tr ' ' "\t" | awk '{print $2 "\t" $1}' > missing_genes.txt

	netanalyzer.py -i filtered_string.txt -G raw_clustered_genes.txt -l $LAYERS --output_metrics_by_cluster group_metrics.txt -M 'avg_sht_path'

	tail -n +2 group_metrics.txt | sort -k2 -n | grep -v -w NULL > filtered_stats_by_cluster.txt
	cut -f 1 filtered_stats_by_cluster.txt > connected_clusters.txt
	grep -w -F -f connected_clusters.txt raw_clustered_genes.txt > connected_raw_clusters
	grep -w -F -f connected_clusters.txt expand_clusters.txt > connected_expand_clusters	
	aggregate_column_data.py -i missing_genes.txt -x 1 -a 2 -s ',' > missing_genes_table.txt

	if [ ! -s raw_clustered_genes.txt ] || [ ! -s expand_clusters.txt ]; then
		>&2 echo "Clustering has failed"
		exit 1
	fi
}

prioritize_clusters_[connected_raw_clusters;connected_expand_clusters]){
	. ~soft_bio_267/initializes/init_crank
	. ~soft_bio_267/initializes/init_python

	mkdir temp
	cut -f 1,2 generate_clusters)/filtered_string.txt | tr "\t" "\n" | sort -u > temp/string_nodes
	cut -f 1 generate_clusters)/missing_genes_table.txt > temp/missing_genes
	grep -v -F -w -f temp/missing_genes generate_clusters)/(*) | grep -F -w -f temp/string_nodes > temp/clusters
	cut -f 2 temp/clusters > temp/cl_genes
	cat temp/string_nodes temp/cl_genes | sort -u | awk '{print $1 "\t" NR}' > temp/gene_index
	cut -f 1,2 generate_clusters)/filtered_string.txt > temp/crank_string.txt
	standard_name_replacer.py -i temp/crank_string.txt -I temp/gene_index -c 1,2 -o temp/crank_string.txt_rep 
	standard_name_replacer.py -i temp/clusters -I temp/gene_index -c 2 -o temp/clusters_rep
	aggregate_column_data.py -i temp/clusters_rep -x 1 -a 2 -s ',' | tr '\t' ' ' | tr ',' ' ' > temp/clustered_genes_AGG.txt
	?
	crank -i:temp/crank_string.txt_rep -c:temp/clustered_genes_AGG.txt -o:crank_metrics.txt

	if [ ! -s crank_metrics.txt ]; then 
		>&2 echo " Cluster prioritization has failed"
		exit 1
	fi
}

analyze_clusters_[connected_raw_clusters;connected_expand_clusters]){
	source ~soft_bio_267/initializes/init_degenes_hunter
	export PATH=~soft_bio_267/programs/x86_64/scripts:$PATH
	export PATH=$scripts_path:$PATH
	aggregate_column_data.py -i generate_clusters)/(*) -x 1 -a 2 -s ',' > genes_by_cluster.txt
	?
	clusters_to_enrichment.R -i genes_by_cluster.txt -w 1 -k "SYMBOL" -p 0.01 -c -o aRD_gene_clusters -M 'PRS' -S 0.7 -C 'ancestor' -F
}

report_data){
	source ~soft_bio_267/initializes/init_R
	source ~soft_bio_267/initializes/init_report_html
	source ~soft_bio_267/initializes/init_python
	export PATH=$scripts_path:$PATH	
	plot_density.R -d generate_clusters)/filtered_string.txt -x V3 -X 'STRING combined score' -o combined_score_dist -H
	plot_density.R -d generate_clusters)/node_attributes.txt -x V3 -X Degree -o degree -H
	plot_density.R -d generate_clusters)/gene_stats.txt -x freq -X 'Number of ocurrences' -o gene_stats
	#Scatterplots:
	combine_files.py -i generate_clusters)/filtered_stats_by_cluster.txt -f generate_clusters)/connected_raw_clusters -g $disease_gene_file -d cohort_analysis)/temp/"$similarity_measure"_clusters.txt -o raw_cluster_size_ASP.txt
	#disPerClust => diseases_per_cluster (cuantas enf. del cluster presentan al menos 1 gen asociado)
	#clusterSize => genes per cluster
	x_y_graph.R -d raw_cluster_size_ASP.txt -x clusterSize -y aspValue -z diseasePerCluster -X 'Genes by cluster' -Y 'ASP value' -Z '' -o raw_cluster_size_ASP_dist 
	combine_files.py -i generate_clusters)/filtered_stats_by_cluster.txt -f generate_clusters)/connected_expand_clusters -g $disease_gene_file -d cohort_analysis)/temp/"$similarity_measure"_clusters.txt -o expanded_cluster_size_ASP.txt
	x_y_graph.R -d expanded_cluster_size_ASP.txt -x clusterSize -y aspValue -z diseasePerCluster -X 'Genes by cluster' -Y 'ASP value' -Z '' -o expanded_cluster_size_ASP_dist 
	merge_tabular.py !prioritize_clusters_!/crank_metrics.txt > metric_table
	#cat !clustering_robustness_!/adjusted_mutual_info > adjusted_mutual_info
	#plot_density.R -d adjusted_mutual_info -x V1 -X 'Adjusted mutual information' -o adj_mut_inf -H
	echo -e '\traw\texpanded' > canvas_table
	tail -n +2 metric_table |cut -f 1,2,6 | grep -v '-' | sort -r -k 2,2 -n | awk '{print "cl" $0}' >> canvas_table
	mkdir raw_enrichment
	ln -s analyze_clusters_connected_raw_clusters)/aRD_gene_clusters/*.png raw_enrichment/
	mkdir expand_enrichment
	ln -s analyze_clusters_connected_expand_clusters)/aRD_gene_clusters/*.png expand_enrichment/
	rm -rf copat; mkdir copat
	ln -s cohort_analysis)/temp/"$similarity_measure"_heatmap.png copat/clustering_heatmap.png
	?
	#report_html -t $report_template -d canvas_table,benchmark)/cdf_table -o cluster_report
	report_html -t $report_template -d canvas_table -o cluster_report
	parse_table_info.py -i $disease_mondo_genes -f $disease_hpo_file -c cohort_analysis)/temp/"$similarity_measure"_clusters.txt -d $phenotype_annotation -o full_info_table.txt
	# Generate two cols file for NetAnalyzer
	tail -n +2 full_info_table.txt | awk -F "\t" '{print "cl" $3 "\t" $2"*"}' | sort -u > net_tab
	tail -n +2 full_info_table.txt | awk -F "\t" '{print $2"*" "\t" $4}' | grep -w -v '-' | desaggregate_column_data.py -i - -x 2 -s ',' | sort -u >> net_tab
	
	# Use NetAnalyzer instead of table2cyt: method = cyt_app, ejemplo en sylentis (ver configuraciÃ³n de layers)
	LAYERS='cl,cl[0-9]*;dis,\*;gene,\S*'
    netanalyzer.py -i net_tab -l $LAYERS -g cluster_disease_gene_net --graph_options 'method=cyt_app'
	aggregate_column_data.py -i generate_clusters)/raw_clustered_genes.txt -x 1 -a 2 -s ',' > genes_by_cluster_ALL.txt
	echo -e "Cluster_id\tASP_value\tAssociated_genes_by_MONDO\tASP_expanded_genes" > cluster_table.txt
	merge_tabular.py generate_clusters)/stats_by_cluster.txt genes_by_cluster_ALL.txt analyze_clusters_connected_expand_clusters)/genes_by_cluster.txt | sed 's/None/-/g' >> cluster_table.txt
	cp full_info_table.txt full_info_table_withNOphen.txt
	sort -u $disease_gene_file > genes
	aggregate_column_data.py -i genes -x 1 -a 2 -s ',' > genes_agg
	cut -f 1 full_info_table.txt | grep -v -w -F -f - genes_agg | awk '{print $1 "\t-\t-\t" $2 "\t-"}' >> full_info_table_withNOphen.txt
	merge_tabular.py full_info_table_withNOphen.txt $all_diseases > full_info_table_withNOphenNOinfo.txt
}
